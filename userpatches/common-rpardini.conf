# Use my own pkgs. I build my own stuff separately in rpardini/armbian-release.
declare -g OCI_TARGET_BASE="ghcr.io/armsurvivors/armbian-release/"
declare -g DOCKER_ARMBIAN_BASE_COORDINATE_PREFIX="ghcr.io/armsurvivors/armbian-builder:armbian-next-"

# Debug console for RPI
declare -g RPI_DEBUG_CONSOLE="yes"

display_alert "Included" "common-rpardini" "info"

# My own extensions.
enable_extension "kernel_headers_deb_rootfs"
enable_extension "cleanup-space-final-image"
# enable_extension "zfs" # Disabled. This proves a point, but makes every image build slow. It's more for making sure kernel-headers are working. They're NOT on armhf targets.

declare -g -r CLOUD_IMAGE="${CLOUD_IMAGE:-"yes"}" # default to yes
if [[ "${CLOUD_IMAGE}" == "yes" ]]; then
	enable_extension "more_like_ubuntu_cloud"
	enable_extension "cloud-init"

	declare -g CLOUD_INIT_RECIPE="${CLOUD_INIT_RECIPE:-"arm2023_${BOARD}"}"
	declare -g CLOUD_INIT_USER_DATA_URL="${CLOUD_INIT_USER_DATA_URL:-"https://cloud-init.pardini.net/rpardini/oldskool-rpardini/master/${CLOUD_INIT_RECIPE}"}"
	declare -g CLOUD_INIT_INSTANCE_ID="${CLOUD_INIT_INSTANCE_ID:-"${CLOUD_INIT_RECIPE}"}"
	display_alert "CLOUD_INIT_USER_DATA_URL" "${CLOUD_INIT_USER_DATA_URL}" "debug"
	display_alert "CLOUD_INIT_INSTANCE_ID" "${CLOUD_INIT_INSTANCE_ID}" "debug"
fi

# Disabled!
#declare -g RKBIN_GIT_URL="https://github.com/rpardini/armbian-rkbin.git"
#declare -g RKBIN_GIT_BRANCH="add-3588-bl32s"

declare -g -r SKIP_ARMBIAN_REPO=yes                     # disabled the default armbian repo. replaced below. READONLY!
function custom_apt_repo__use_new_armbian_next_repo() { # My tryout apt repository.

	if [[ "${SKIP_CUSTOM_REPO:-no}" == "yes" ]]; then
		display_alert "Skipping" "custom_apt_repo__use_new_armbian_next_repo" "info"
		return 0
	fi

	: "${SDCARD?:SDCARD is not set}"
	: "${RELEASE?:RELEASE is not set}"
	: "${CUSTOM_REPO_WHEN?:CUSTOM_REPO_WHEN is not set}"

	if [[ "${CUSTOM_REPO_WHEN}" == "image-late" ]]; then # only after image is fully built, including customization
		display_alert "Deploying apt key" "${CUSTOM_REPO_WHEN} :: armbian-next apt-test APT repo" "info"
		run_host_command_logged wget --output-document="${SDCARD}"/usr/share/keyrings/armbian-next.gpg https://apt-test.next.armbian.com/armbian-next.gpg
		declare signed_by="[signed-by=/usr/share/keyrings/armbian-next.gpg]"

		display_alert "Enabling sources.list with" "${CUSTOM_REPO_WHEN} :: armbian-next apt-test APT repo" ""
		cat <<- EOD > "${SDCARD}"/etc/apt/sources.list.d/armbian-next.list
			deb ${signed_by} https://apt-test.next.armbian.com armbian main
			deb ${signed_by} https://apt-test.next.armbian.com armbian-${RELEASE} main
		EOD
		run_tool_batcat --file-name "armbian-next.list" "${SDCARD}"/etc/apt/sources.list.d/armbian-next.list
	else
		display_alert "NOT enabling sources.list with" "${CUSTOM_REPO_WHEN} :: armbian-next apt-test APT repo" ""
	fi

	return 0
}

# Use my own firmware fork.
### OFF ### declare -g ARMBIAN_FIRMWARE_GIT_SOURCE="https://github.com/rpardini/armbian-firmware"
### OFF ### declare -g ARMBIAN_FIRMWARE_GIT_BRANCH="add-khadas-amlogic-ne-firmware"

# Use my own branch on armbian/linux-rockchip kernel repo.
function user_config__use_rpardini_fork_for_rk3588() {
	# if [[ "${KERNELSOURCE}" == 'https://github.com/armbian/linux-rockchip' || "${KERNELSOURCE}" == 'https://github.com/armbian/linux-rockchip.git' ]]; then
	# 	# if [[ "${KERNELBRANCH}" == "branch:rk-6.1-rkr1" ]]; then
	# 	# 	declare -g KERNELSOURCE="https://github.com/rpardini/armbian-linux-rockchip-rk3588.git"
	# 	# 	declare -g KERNELBRANCH='branch:armbian-rk-6.1-rkr1-20240714-sync-nanopi6'
	# 	# 	declare -g -i KERNEL_GIT_CACHE_TTL=300 # 5 minutes; this is a high-traffic repo
	# 	# 	display_alert "Using my own fork of linux-rockchip for rk3588" "${KERNELBRANCH} :: ttl ${KERNEL_GIT_CACHE_TTL}" "warn"
	# 	# fi
	#
	# 	#if [[ "${KERNELBRANCH}" == "branch:rk-5.10-rkr6" ]]; then
	# 	#	declare -g KERNELSOURCE="https://github.com/rpardini/armbian-linux-rockchip-rk3588.git"
	# 	#	declare -g KERNELBRANCH='branch:5.10-rkr6-add-nanopi5'
	# 	#	declare -g -i KERNEL_GIT_CACHE_TTL=300 # 5 minutes; this is a high-traffic repo
	# 	#	display_alert "Using my own fork of linux-rockchip for rk3588" "${KERNELBRANCH} :: ttl ${KERNEL_GIT_CACHE_TTL}" "warn"
	# 	#fi
	# fi

	# if [[ "${KERNELSOURCE}" == 'https://github.com/armbian/linux-rockchip.git' ]]; then
	# 	if [[ "${KERNELBRANCH}" == "branch:rk-6.1-rkr3" ]]; then
	# 		declare -g KERNELSOURCE="https://github.com/rpardini/armbian-linux-rockchip-rk3588.git"
	# 		declare -g KERNELBRANCH='branch:armbian_rk-6.1-rkr3_20240919-add-mixtile-edge2'
	# 		declare -g -i KERNEL_GIT_CACHE_TTL=300 # 5 minutes; this is a high-traffic repo
	# 		display_alert "Using my own fork of linux-rockchip for rk3588" "${KERNELBRANCH} :: ttl ${KERNEL_GIT_CACHE_TTL}" "warn"
	# 	fi
	# fi

	return 0
}

function user_config__completely_remove_xapian_and_synaptic_everywhere() {
	display_alert "Removing" "xapian and synaptic, rpardini hates them; add ssh-import-id is great" "info"
	remove_packages apt-xapian-index synaptic
	add_packages_to_rootfs ssh-import-id
	add_packages_to_rootfs eatmydata # force rebuild for noble's systemd 255
}

# Disable ccache, it's simply not efficient, adds overhead, and when there's a mismatch, hit ratio is 0
declare -g -r USE_CCACHE=no

# Standard frag
#enable_extension "detect-unused-extensions"
#enable_extension "gen-sample-extension-docs"

source extra-rpardini.conf # my own proxy settings etc

display_alert "common-rpardini" "setting default values" "info"

declare -g SKIP_VERIFY=yes # No need to verify written SDCARD. Really.

# Common settings. Customize if you wish...

# declare -g SERIALCON="ttyAML0" # @TODO: this is, of course, ONLY for Amlogic devices. It is BOARD specific.
declare -g DEFAULT_CONSOLE="serial"
declare -g TZDATA="Etc/UTC"
declare -g ROOTPWD="1234"
declare -g MAINTAINER="Ricardo Pardini"
declare -g MAINTAINERMAIL="ricardo@pardini.net"

# Seems I have to be an expert, even though I'm clearly not.
declare -g EXPERT=yes

# Configure those to your liking.
declare -g DEST_LANG="en_US.UTF-8" # sl_SI.UTF-8, en_US.UTF-8
declare -g BUILD_MINIMAL=no        # No minimal. Fully working server cli please
declare -g BUILD_DESKTOP=no        # No desktop. You install it later after jumpstarting.
declare -g INSTALL_HEADERS=no      # dont install kernel headers package
declare -g WIREGUARD=no            # An extra package installed? No thanks.
declare -g AUFS=no                 # Docker uses overlay2 for years now.
declare -g SYNC_CLOCK=no           # This takes waay too long, and I run ntpd anyway so...
declare -g USE_OVERLAYFS=no        # Do NOT use overlays for anything. Should be default.

# force verbosity=7 and console=serial for u-boot based boards. This makes my builds unusable by normies who don't have a serial console. GET SERIAL CONSOLES! they're cheap.
function config_tweaks_post_family_config__enable_serial_debug_armbianEnv_bootenv_console() {
	display_alert "Enabling rpardini serial debug" "rpardini serial debug bootenv" "info"
	# My own bootscript (seeds armbianEnv.txt)
	declare -g BOOTENV_FILE='serial_debug.txt'
}

####
#### Dev stuff. Don't touch unless you're adding a board.
####
declare -g KERNEL_CONFIGURE=no      # Change to yes to make menuconfig before compiling. The edited config will be output in output/config
declare -g COMPRESS_OUTPUTIMAGE=img # i'm an sdcard jockey -- no hashes for me
declare -g OFFLINE_WORK=no          # yes to avoid using the network

#function image_specific_armbian_env_ready__write_usbquirks_for_my_stuff() {
#	display_alert "Writing rpardinis quirks to armbianEnv.txt" "${SDCARD}/boot/armbianEnv.txt" "info"
#	[[ ! -f "${SDCARD}/boot/armbianEnv.txt" ]] && return 0
#
#	# 0bda:9210 RTL9210
#	echo "usbstoragequirks=0x0bda:0x9210:u" >> "${SDCARD}/boot/armbianEnv.txt"
#
#	# @TODO: what if grub? what if flash-kernel? what if... ?
#}

function cloud_init_modify_network_config__write_wifi_net_cloudinit_config() {
	# If we have the env var "WIFI_SSID" and "WIFI_PASS" set, we will write a cloud-init config to the image
	# that will configure the wifi on first boot.
	[[ -z "${WIFI_SSID}" || -z "${WIFI_PASS}" ]] && display_alert "Set env vars to setup cloud-init wifi preconfig" "WIFI_SSID and WIFI_PASS" "info" && return 0

	declare WIFI_INTF="${WIFI_INTF:-"wlan0"}"

	display_alert "Writing wifi config to cloud-init" "WIFI_SSID=${WIFI_SSID}" "warn"
	local target_net_conf="${CI_TARGET}${CLOUD_INIT_CONFIG_LOCATION}"/network-config
	# Attention, this is YAML, so wihtespace is significant!
	cat <<- CLOUD_INIT_NETWORK_CONFIG_WIFI > "${target_net_conf}"
		version: 2
		wifis:
		  ${WIFI_INTF}:
		    dhcp4: yes
		    dhcp6: yes
		    access-points:
		      "${WIFI_SSID}":
		          password: "${WIFI_PASS}"
	CLOUD_INIT_NETWORK_CONFIG_WIFI

	display_alert "Final c-i network-config" "${target_net_conf}" "debug"
	run_host_command_logged cat "${target_net_conf}"

}
