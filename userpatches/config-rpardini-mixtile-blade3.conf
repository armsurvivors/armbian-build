if [[ -z "${BLADE3}" ]]; then
	echo "BLADE3 not set. Please set it to A/B you want to build for."
	exit 1
fi

declare -g BOARD=mixtile-blade3
declare -g BRANCH=legacy
declare -g RELEASE=bookworm
declare -g CLOUD_INIT_RECIPE=vmk8s_128_containerd
declare -g CLOUD_INIT_INSTANCE_ID=mixtile-blade3-${BLADE3}

enable_extension "rkdevflash"

## Booting the mixtile-blade3's is a bit limited to u-boot currently.
# The blade3 uses USB PD powering, and the usual PD negotiations problems ensue.
# Mixtile has provided a u-boot hack (on vendor u-boot, only) that forces PD to high power and stuff works.
# That can't be done on edk2. To use edk2 we need to supply 12v power to the board which requires the u.2 breakout board.
# Since we use m.2 nvme breakout, we need to use PD, and thus need to use vendor u-boot.

## Blade3 networking
# I've implemented stable-mac in vendor u-boot as well, using rk vendor partition and hacks to r8169 driver.
display_alert "Mixtile Blade 3 BOARD" "${BOARD}" "info"
display_alert "Mixtile Blade 3 BRANCH" "${BRANCH}" "info"
display_alert "Mixtile Blade 3 RELEASE" "${RELEASE}" "info"
display_alert "Mixtile Blade 3 CLOUD_INIT_RECIPE" "${CLOUD_INIT_RECIPE}" "info"
display_alert "Mixtile Blade 3 CLOUD_INIT_INSTANCE_ID" "${CLOUD_INIT_INSTANCE_ID}" "info"

echo "rpardini-mixtile-blade3 config for ${BOARD}"

function post_family_config__force_sata2_overlay_for_edge() {
	if [[ "${BRANCH}" != "edge" ]]; then
		display_alert "Skipping sata2 overlay for non-edge branch" "${BOARD}" "warn"
		return 0
	fi

	display_alert "Enabling sata2 overlay edge" "${BOARD} ${BRANCH}" "warn"
	declare -g -r DEFAULT_OVERLAYS="sata2"
}

function post_family_config__force_sata2_overlay_for_legacy() {
	if [[ "${BRANCH}" != "legacy" && "${BRANCH}" != "vendor" ]]; then
		display_alert "Skipping sata2 overlay for non-legacy/vendor branch" "${BOARD}" "warn"
		return 0
	fi

	display_alert "Enabling sata2 overlay legacy" "${BOARD} ${BRANCH}" "warn"
	declare -g -r DEFAULT_OVERLAYS="mixtile-blade3-sata2"
}

function cloud_init_modify_network_config__mixtile_blade3() {
	if [[ "${BRANCH}" != "edge" ]]; then
		display_alert "Skipping network config for non-edge branch" "${BOARD}" "warn"
		return 0
	fi

	declare -A netconf=()
	case ${BLADE3} in
		a)
			netconf[macaddress]="62:66:30:3a:00:54"
			netconf[ipv4]="192.168.66.142/24"
			netconf[ipv6]="2a02:a466:4d7a:1:6066:30ff:fe3a:54/64"
			;;
		b)
			netconf[macaddress]="66:6b:65:61:01:50"
			netconf[ipv4]="192.168.66.120/24"
			netconf[ipv6]="2a02:a466:4d7a:1:646b:65ff:fe61:150/64"
			;;
		*)
			exit_with_error "Unknown BLADE3 value ${BLADE3}"
			;;

	esac

	display_alert "Writing Blade3 ${BLADE3} network config to cloud-init" "${BOARD} ${BRANCH}" "warn"
	local target_net_conf="${CI_TARGET}${CLOUD_INIT_CONFIG_LOCATION}"/network-config
	# Attention, this is YAML, so wihtespace is significant!
	cat <<- CLOUD_INIT_NETWORK_CONFIG_WIFI > "${target_net_conf}"
		version: 2
		renderer: networkd
		ethernets:
		  enP2p35s0:
		    dhcp4: false
		    dhcp6: false
		    optional: true
		bridges:
		  lan:
		    dhcp4: false
		    dhcp6: false
		    interfaces:
		      - enP2p35s0
		    optional: false # Hmm. This has been controversial in the past, and impedes boot on some bridge configs
		    macaddress: ${netconf[macaddress]}
		    addresses:
		      - ${netconf[ipv4]}
		      - ${netconf[ipv6]}
		    routes:
		      - to: default # legacy was gateway4
		        via: 192.168.66.1
		      - to: default # legacy was gateway6
		        via: 2a02:a466:4d7a:1:5e49:79ff:fe58:2b10
		    nameservers:
		      addresses:
		        - 2a02:a466:4d7a:1:5e49:79ff:fe58:2b10
		        - 192.168.66.1
	CLOUD_INIT_NETWORK_CONFIG_WIFI

	display_alert "Final c-i network-config" "${target_net_conf}" "warn"
	run_host_command_logged cat "${target_net_conf}"
}

# common stuff for all my builds. activates a bunch of extensions.
source common-rpardini.conf
