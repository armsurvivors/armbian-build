declare -g BOARD=uefi-x86
declare -g BRANCH="${BRANCH:-"current"}" #current # or edge
declare -g RELEASE="${RELEASE:-"bookworm"}"
declare -g CLOUD_INIT_RECIPE="${CLOUD_INIT_RECIPE:-"vmk8s_128_containerd"}" # vmk8s_128_containerd
declare -g CLOUD_INIT_INSTANCE_ID="${CLOUD_INIT_INSTANCE_ID:-"thundercat"}"

if [[ "$(readlink /var/lib/cloud/instance)" == "${CLOUD_INIT_INSTANCE_ID}" ]]; then
	display_alert "Running on/for ${CLOUD_INIT_INSTANCE_ID}" "${CLOUD_INIT_INSTANCE_ID} on ${CLOUD_INIT_INSTANCE_ID}" "info"
fi

display_alert "${CLOUD_INIT_INSTANCE_ID} BOARD" "${BOARD}" "info"
display_alert "${CLOUD_INIT_INSTANCE_ID} BRANCH" "${BRANCH}" "info"
display_alert "${CLOUD_INIT_INSTANCE_ID} RELEASE" "${RELEASE}" "info"
display_alert "${CLOUD_INIT_INSTANCE_ID} CLOUD_INIT_RECIPE" "${CLOUD_INIT_RECIPE}" "info"
display_alert "${CLOUD_INIT_INSTANCE_ID} CLOUD_INIT_INSTANCE_ID" "${CLOUD_INIT_INSTANCE_ID}" "info"

echo "${CLOUD_INIT_INSTANCE_ID} config for ${BOARD}"

function post_build_image_write__efibootmgr() {
	# If CARD_DEVICE is not set, return 0
	if [[ -z "${CARD_DEVICE}" ]]; then
		display_alert "No CARD_DEVICE set" "${BOARD} ${CLOUD_INIT_INSTANCE_ID} ${CARD_DEVICE}" "info"
		return 0
	fi

	if [[ "$(readlink /var/lib/cloud/instance)" == "${CLOUD_INIT_INSTANCE_ID}" ]]; then
		display_alert "Writing EFI boot entry" "${BOARD} ${CLOUD_INIT_INSTANCE_ID} ${CARD_DEVICE}" "info"
		# Now use efibootmgr to create an entry pointing at the CARD_DEVICE partition 2 (the EFI partition)
		# Set the newly entry as the default boot entry
		run_host_command_logged efibootmgr --create --disk "${CARD_DEVICE}" --part 2 --loader /EFI/BOOT/BOOTX64.EFI --label "${CLOUD_INIT_INSTANCE_ID}" --verbose
	else
		display_alert "Skipping EFI boot entry" "${BOARD} ${CLOUD_INIT_INSTANCE_ID} ${CARD_DEVICE}" "info"
		return 0
	fi

}

# common stuff for all my builds. activates a bunch of extensions.
source common-rpardini.conf
