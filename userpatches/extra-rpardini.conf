# Don't do any other is we're not running as root, on Linux.
if [[ "${EUID}" == "0" && "$(uname)" == "Linux" ]]; then

	# Hack, get my motherboard serial number, if it matches, activate a bunch of network-related settings.
	MOTHERBOARD_SERIAL_NUMBER=""
	if [[ -f /usr/sbin/dmidecode ]]; then
		MOTHERBOARD_SERIAL_NUMBER=$(dmidecode | grep -A 15 ASUS | grep "Serial Number" | cut -d ":" -f 2 | xargs echo -n)
	fi

	# Get the MAC address of eth0
	MAC_ADDRESS=""
	[[ -f /sys/class/net/eth0/address ]] && MAC_ADDRESS="$(xargs echo -n < /sys/class/net/eth0/address)"

	if [[ "${MOTHERBOARD_SERIAL_NUMBER}" == "161292401700997" ]] || # amd64
		[[ "${MAC_ADDRESS}" == "00:1e:06:42:6f:5d" ]]; then            # n2+
		display_alert "Not you? Click here to logout - lol" "Detected rpardini developer machine" "info"
		# the cloud-init extension accepts CLOUD_INIT_USER_DATA_URL which I always have set on my build env. (its private, thanks for asking)
		# if that is set, I need to use dhcp and wait for network, so I change CLOUD_INIT_NET_CONFIG_FILE to reflect that.
		# See userpatches/overlay/cloud-init tree
		cloud_init_determine_network_config_template__990_prefer_dhcp_and_wait() {
			if [[ "a${CLOUD_INIT_USER_DATA_URL}" != "afiles" ]]; then
				# Add "-wait"  to the cloud-init network config, since I'll be using network during cloud-init.
				declare -g CLOUD_INIT_NET_CONFIG_FILE="${CLOUD_INIT_NET_CONFIG_FILE//staticip/dhcp}-wait"
				display_alert "c-i network-config" "${CLOUD_INIT_NET_CONFIG_FILE}" "warn"
			fi
		}

		# optimize build time with close to 100% CPU usage -- keep one hyperthread or core free
		# on hyperthreaded systems, nproc counts hyperthreads, not cores. so maybe not ideal on non HT-systems
		# or when running on VMs whose hypervisors lie about topology.
		config_post_determine_cthreads__i_have_hyperthreaded_build_machine() {
			local OLD_CTHREADS=$CTHREADS
			declare -g CTHREADS="-j$(nproc --ignore=1)"
			display_alert "cthreads" "Updated from $OLD_CTHREADS to $CTHREADS since we have $(nproc) cpu threads" "info"
		}

	fi
fi
